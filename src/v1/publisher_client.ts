// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
  IamClient,
  IamProtos,
} from 'google-gax';
import * as path from 'path';

import {Transform} from 'stream';
import {RequestType} from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import * as gapicConfig from './publisher_client_config.json';

const version = require('../../../package.json').version;

/**
 *  The service that an application uses to manipulate topics, and to send
 *  messages to a topic.
 * @class
 * @memberof v1
 */
export class PublisherClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  publisherStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of PublisherClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof PublisherClient;
    const servicePath =
      opts && opts.servicePath
        ? opts.servicePath
        : opts && opts.apiEndpoint
        ? opts.apiEndpoint
        : staticMembers.servicePath;
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;

    // users can override the config from client side, like retry codes name.
    // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/master/src/gax.ts#L546
    // The way to override client config for Showcase API:
    //
    // const customConfig = {"interfaces": {"google.showcase.v1beta1.Echo": {"methods": {"Echo": {"retry_codes_name": "idempotent", "retry_params_name": "default"}}}}}
    // const showcaseClient = new showcaseClient({ projectId, customConfig });
    opts.clientConfig = opts.clientConfig || {};

    // If we're running in browser, it's OK to omit `fallback` since
    // google-gax has `browser` field in its `package.json`.
    // For Electron (which does not respect `browser` field),
    // pass `{fallback: true}` to the PublisherClient constructor.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof PublisherClient).scopes;
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;
    this.iamClient = new IamClient(this._gaxGrpc, opts);

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(
      __dirname,
      '..',
      '..',
      'protos',
      'protos.json'
    );
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback
        ? // eslint-disable-next-line @typescript-eslint/no-var-requires
          require('../../protos/protos.json')
        : nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectTopicPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/topics/{topic}'
      ),
      snapshotPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/snapshots/{snapshot}'
      ),
      subscriptionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/subscriptions/{subscription}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listTopics: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'topics'
      ),
      listTopicSubscriptions: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'subscriptions'
      ),
      listTopicSnapshots: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'snapshots'
      ),
    };

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const protoFilesRoot = opts.fallback
      ? this._gaxModule.protobuf.Root.fromJSON(
          // eslint-disable-next-line @typescript-eslint/no-var-requires
          require('../../protos/protos.json')
        )
      : this._gaxModule.protobuf.loadSync(nodejsProtoPath);

    // Some methods on this API support automatically batching
    // requests; denote this.

    this.descriptors.batching = {
      Publish: new this._gaxModule.BundleDescriptor(
        'messages',
        ['topic'],
        'message_ids',
        gax.createByteLengthFunction(
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          protoFilesRoot.lookupType('google.pubsub.v1.PubsubMessage') as any
        )
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.pubsub.v1.Publisher',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.publisherStub) {
      return this.publisherStub;
    }

    // Put together the "service stub" for
    // google.pubsub.v1.Publisher.
    this.publisherStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.pubsub.v1.Publisher'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.pubsub.v1.Publisher,
      this._opts
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const publisherStubMethods = [
      'createTopic',
      'updateTopic',
      'publish',
      'getTopic',
      'listTopics',
      'listTopicSubscriptions',
      'listTopicSnapshots',
      'deleteTopic',
      'detachSubscription',
    ];
    for (const methodName of publisherStubMethods) {
      const callPromise = this.publisherStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        this.descriptors.page[methodName] ||
          this.descriptors.stream[methodName] ||
          this.descriptors.longrunning[methodName]
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.publisherStub;
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'pubsub.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'pubsub.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/pubsub',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  createTopic(
    request: protos.google.pubsub.v1.ITopic,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.pubsub.v1.ITopic,
      protos.google.pubsub.v1.ITopic | undefined,
      {} | undefined
    ]
  >;
  createTopic(
    request: protos.google.pubsub.v1.ITopic,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.pubsub.v1.ITopic,
      protos.google.pubsub.v1.ITopic | null | undefined,
      {} | null | undefined
    >
  ): void;
  createTopic(
    request: protos.google.pubsub.v1.ITopic,
    callback: Callback<
      protos.google.pubsub.v1.ITopic,
      protos.google.pubsub.v1.ITopic | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Creates the given topic with the given name. See the
   * <a href="https://cloud.google.com/pubsub/docs/admin#resource_names">
   * resource name rules</a>.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the topic. It must have the format
   *   `"projects/{project}/topics/{topic}"`. `{topic}` must start with a letter,
   *   and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
   *   underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent
   *   signs (`%`). It must be between 3 and 255 characters in length, and it
   *   must not start with `"goog"`.
   * @param {number[]} request.labels
   *   See <a href="https://cloud.google.com/pubsub/docs/labels"> Creating and
   *   managing labels</a>.
   * @param {google.pubsub.v1.MessageStoragePolicy} request.messageStoragePolicy
   *   Policy constraining the set of Google Cloud Platform regions where messages
   *   published to the topic may be stored. If not present, then no constraints
   *   are in effect.
   * @param {string} request.kmsKeyName
   *   The resource name of the Cloud KMS CryptoKey to be used to protect access
   *   to messages published on this topic.
   *
   *   The expected format is `projects/* /locations/* /keyRings/* /cryptoKeys/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Topic]{@link google.pubsub.v1.Topic}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createTopic(
    request: protos.google.pubsub.v1.ITopic,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.pubsub.v1.ITopic,
          protos.google.pubsub.v1.ITopic | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.pubsub.v1.ITopic,
      protos.google.pubsub.v1.ITopic | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.pubsub.v1.ITopic,
      protos.google.pubsub.v1.ITopic | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.createTopic(request, options, callback);
  }
  updateTopic(
    request: protos.google.pubsub.v1.IUpdateTopicRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.pubsub.v1.ITopic,
      protos.google.pubsub.v1.IUpdateTopicRequest | undefined,
      {} | undefined
    ]
  >;
  updateTopic(
    request: protos.google.pubsub.v1.IUpdateTopicRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.pubsub.v1.ITopic,
      protos.google.pubsub.v1.IUpdateTopicRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateTopic(
    request: protos.google.pubsub.v1.IUpdateTopicRequest,
    callback: Callback<
      protos.google.pubsub.v1.ITopic,
      protos.google.pubsub.v1.IUpdateTopicRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Updates an existing topic. Note that certain properties of a
   * topic are not modifiable.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.pubsub.v1.Topic} request.topic
   *   Required. The updated topic object.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Indicates which fields in the provided topic to update. Must be
   *   specified and non-empty. Note that if `update_mask` contains
   *   "message_storage_policy" but the `message_storage_policy` is not set in
   *   the `topic` provided above, then the updated value is determined by the
   *   policy configured at the project or organization level.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Topic]{@link google.pubsub.v1.Topic}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateTopic(
    request: protos.google.pubsub.v1.IUpdateTopicRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.pubsub.v1.ITopic,
          protos.google.pubsub.v1.IUpdateTopicRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.pubsub.v1.ITopic,
      protos.google.pubsub.v1.IUpdateTopicRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.pubsub.v1.ITopic,
      protos.google.pubsub.v1.IUpdateTopicRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'topic.name': request.topic!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateTopic(request, options, callback);
  }
  publish(
    request: protos.google.pubsub.v1.IPublishRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.pubsub.v1.IPublishResponse,
      protos.google.pubsub.v1.IPublishRequest | undefined,
      {} | undefined
    ]
  >;
  publish(
    request: protos.google.pubsub.v1.IPublishRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.pubsub.v1.IPublishResponse,
      protos.google.pubsub.v1.IPublishRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  publish(
    request: protos.google.pubsub.v1.IPublishRequest,
    callback: Callback<
      protos.google.pubsub.v1.IPublishResponse,
      protos.google.pubsub.v1.IPublishRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
   * does not exist.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.topic
   *   Required. The messages in the request will be published on this topic.
   *   Format is `projects/{project}/topics/{topic}`.
   * @param {number[]} request.messages
   *   Required. The messages to publish.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PublishResponse]{@link google.pubsub.v1.PublishResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  publish(
    request: protos.google.pubsub.v1.IPublishRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.pubsub.v1.IPublishResponse,
          protos.google.pubsub.v1.IPublishRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.pubsub.v1.IPublishResponse,
      protos.google.pubsub.v1.IPublishRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.pubsub.v1.IPublishResponse,
      protos.google.pubsub.v1.IPublishRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      topic: request.topic || '',
    });
    this.initialize();
    return this.innerApiCalls.publish(request, options, callback);
  }
  getTopic(
    request: protos.google.pubsub.v1.IGetTopicRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.pubsub.v1.ITopic,
      protos.google.pubsub.v1.IGetTopicRequest | undefined,
      {} | undefined
    ]
  >;
  getTopic(
    request: protos.google.pubsub.v1.IGetTopicRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.pubsub.v1.ITopic,
      protos.google.pubsub.v1.IGetTopicRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getTopic(
    request: protos.google.pubsub.v1.IGetTopicRequest,
    callback: Callback<
      protos.google.pubsub.v1.ITopic,
      protos.google.pubsub.v1.IGetTopicRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Gets the configuration of a topic.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.topic
   *   Required. The name of the topic to get.
   *   Format is `projects/{project}/topics/{topic}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Topic]{@link google.pubsub.v1.Topic}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getTopic(
    request: protos.google.pubsub.v1.IGetTopicRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.pubsub.v1.ITopic,
          protos.google.pubsub.v1.IGetTopicRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.pubsub.v1.ITopic,
      protos.google.pubsub.v1.IGetTopicRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.pubsub.v1.ITopic,
      protos.google.pubsub.v1.IGetTopicRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      topic: request.topic || '',
    });
    this.initialize();
    return this.innerApiCalls.getTopic(request, options, callback);
  }
  deleteTopic(
    request: protos.google.pubsub.v1.IDeleteTopicRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.pubsub.v1.IDeleteTopicRequest | undefined,
      {} | undefined
    ]
  >;
  deleteTopic(
    request: protos.google.pubsub.v1.IDeleteTopicRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.pubsub.v1.IDeleteTopicRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTopic(
    request: protos.google.pubsub.v1.IDeleteTopicRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.pubsub.v1.IDeleteTopicRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Deletes the topic with the given name. Returns `NOT_FOUND` if the topic
   * does not exist. After a topic is deleted, a new topic may be created with
   * the same name; this is an entirely new topic with none of the old
   * configuration or subscriptions. Existing subscriptions to this topic are
   * not deleted, but their `topic` field is set to `_deleted-topic_`.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.topic
   *   Required. Name of the topic to delete.
   *   Format is `projects/{project}/topics/{topic}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteTopic(
    request: protos.google.pubsub.v1.IDeleteTopicRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          protos.google.pubsub.v1.IDeleteTopicRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.pubsub.v1.IDeleteTopicRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.pubsub.v1.IDeleteTopicRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      topic: request.topic || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteTopic(request, options, callback);
  }
  detachSubscription(
    request: protos.google.pubsub.v1.IDetachSubscriptionRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.pubsub.v1.IDetachSubscriptionResponse,
      protos.google.pubsub.v1.IDetachSubscriptionRequest | undefined,
      {} | undefined
    ]
  >;
  detachSubscription(
    request: protos.google.pubsub.v1.IDetachSubscriptionRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.pubsub.v1.IDetachSubscriptionResponse,
      protos.google.pubsub.v1.IDetachSubscriptionRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  detachSubscription(
    request: protos.google.pubsub.v1.IDetachSubscriptionRequest,
    callback: Callback<
      protos.google.pubsub.v1.IDetachSubscriptionResponse,
      protos.google.pubsub.v1.IDetachSubscriptionRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Detaches a subscription from this topic. All messages retained in the
   * subscription are dropped. Subsequent `Pull` and `StreamingPull` requests
   * will return FAILED_PRECONDITION. If the subscription is a push
   * subscription, pushes to the endpoint will stop.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.subscription
   *   Required. The subscription to detach.
   *   Format is `projects/{project}/subscriptions/{subscription}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [DetachSubscriptionResponse]{@link google.pubsub.v1.DetachSubscriptionResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  detachSubscription(
    request: protos.google.pubsub.v1.IDetachSubscriptionRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.pubsub.v1.IDetachSubscriptionResponse,
          protos.google.pubsub.v1.IDetachSubscriptionRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.pubsub.v1.IDetachSubscriptionResponse,
      protos.google.pubsub.v1.IDetachSubscriptionRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.pubsub.v1.IDetachSubscriptionResponse,
      protos.google.pubsub.v1.IDetachSubscriptionRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      subscription: request.subscription || '',
    });
    this.initialize();
    return this.innerApiCalls.detachSubscription(request, options, callback);
  }

  listTopics(
    request: protos.google.pubsub.v1.IListTopicsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.pubsub.v1.ITopic[],
      protos.google.pubsub.v1.IListTopicsRequest | null,
      protos.google.pubsub.v1.IListTopicsResponse
    ]
  >;
  listTopics(
    request: protos.google.pubsub.v1.IListTopicsRequest,
    options: gax.CallOptions,
    callback: PaginationCallback<
      protos.google.pubsub.v1.IListTopicsRequest,
      protos.google.pubsub.v1.IListTopicsResponse | null | undefined,
      protos.google.pubsub.v1.ITopic
    >
  ): void;
  listTopics(
    request: protos.google.pubsub.v1.IListTopicsRequest,
    callback: PaginationCallback<
      protos.google.pubsub.v1.IListTopicsRequest,
      protos.google.pubsub.v1.IListTopicsResponse | null | undefined,
      protos.google.pubsub.v1.ITopic
    >
  ): void;
  /**
   * Lists matching topics.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.project
   *   Required. The name of the project in which to list topics.
   *   Format is `projects/{project-id}`.
   * @param {number} request.pageSize
   *   Maximum number of topics to return.
   * @param {string} request.pageToken
   *   The value returned by the last `ListTopicsResponse`; indicates that this is
   *   a continuation of a prior `ListTopics` call, and that the system should
   *   return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Topic]{@link google.pubsub.v1.Topic}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Topic]{@link google.pubsub.v1.Topic} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListTopicsRequest]{@link google.pubsub.v1.ListTopicsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListTopicsResponse]{@link google.pubsub.v1.ListTopicsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listTopics(
    request: protos.google.pubsub.v1.IListTopicsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | PaginationCallback<
          protos.google.pubsub.v1.IListTopicsRequest,
          protos.google.pubsub.v1.IListTopicsResponse | null | undefined,
          protos.google.pubsub.v1.ITopic
        >,
    callback?: PaginationCallback<
      protos.google.pubsub.v1.IListTopicsRequest,
      protos.google.pubsub.v1.IListTopicsResponse | null | undefined,
      protos.google.pubsub.v1.ITopic
    >
  ): Promise<
    [
      protos.google.pubsub.v1.ITopic[],
      protos.google.pubsub.v1.IListTopicsRequest | null,
      protos.google.pubsub.v1.IListTopicsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      project: request.project || '',
    });
    this.initialize();
    return this.innerApiCalls.listTopics(request, options, callback);
  }

  /**
   * Equivalent to {@link listTopics}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listTopics} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.project
   *   Required. The name of the project in which to list topics.
   *   Format is `projects/{project-id}`.
   * @param {number} request.pageSize
   *   Maximum number of topics to return.
   * @param {string} request.pageToken
   *   The value returned by the last `ListTopicsResponse`; indicates that this is
   *   a continuation of a prior `ListTopics` call, and that the system should
   *   return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Topic]{@link google.pubsub.v1.Topic} on 'data' event.
   */
  listTopicsStream(
    request?: protos.google.pubsub.v1.IListTopicsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      project: request.project || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listTopics.createStream(
      this.innerApiCalls.listTopics as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to {@link listTopics}, but returns an iterable object.
   *
   * for-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.project
   *   Required. The name of the project in which to list topics.
   *   Format is `projects/{project-id}`.
   * @param {number} request.pageSize
   *   Maximum number of topics to return.
   * @param {string} request.pageToken
   *   The value returned by the last `ListTopicsResponse`; indicates that this is
   *   a continuation of a prior `ListTopics` call, and that the system should
   *   return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   */
  listTopicsAsync(
    request?: protos.google.pubsub.v1.IListTopicsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.pubsub.v1.ITopic> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      project: request.project || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listTopics.asyncIterate(
      this.innerApiCalls['listTopics'] as GaxCall,
      (request as unknown) as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.pubsub.v1.ITopic>;
  }
  listTopicSubscriptions(
    request: protos.google.pubsub.v1.IListTopicSubscriptionsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      string[],
      protos.google.pubsub.v1.IListTopicSubscriptionsRequest | null,
      protos.google.pubsub.v1.IListTopicSubscriptionsResponse
    ]
  >;
  listTopicSubscriptions(
    request: protos.google.pubsub.v1.IListTopicSubscriptionsRequest,
    options: gax.CallOptions,
    callback: PaginationCallback<
      protos.google.pubsub.v1.IListTopicSubscriptionsRequest,
      | protos.google.pubsub.v1.IListTopicSubscriptionsResponse
      | null
      | undefined,
      string
    >
  ): void;
  listTopicSubscriptions(
    request: protos.google.pubsub.v1.IListTopicSubscriptionsRequest,
    callback: PaginationCallback<
      protos.google.pubsub.v1.IListTopicSubscriptionsRequest,
      | protos.google.pubsub.v1.IListTopicSubscriptionsResponse
      | null
      | undefined,
      string
    >
  ): void;
  /**
   * Lists the names of the attached subscriptions on this topic.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.topic
   *   Required. The name of the topic that subscriptions are attached to.
   *   Format is `projects/{project}/topics/{topic}`.
   * @param {number} request.pageSize
   *   Maximum number of subscription names to return.
   * @param {string} request.pageToken
   *   The value returned by the last `ListTopicSubscriptionsResponse`; indicates
   *   that this is a continuation of a prior `ListTopicSubscriptions` call, and
   *   that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of string.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of string that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListTopicSubscriptionsRequest]{@link google.pubsub.v1.ListTopicSubscriptionsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListTopicSubscriptionsResponse]{@link google.pubsub.v1.ListTopicSubscriptionsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listTopicSubscriptions(
    request: protos.google.pubsub.v1.IListTopicSubscriptionsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | PaginationCallback<
          protos.google.pubsub.v1.IListTopicSubscriptionsRequest,
          | protos.google.pubsub.v1.IListTopicSubscriptionsResponse
          | null
          | undefined,
          string
        >,
    callback?: PaginationCallback<
      protos.google.pubsub.v1.IListTopicSubscriptionsRequest,
      | protos.google.pubsub.v1.IListTopicSubscriptionsResponse
      | null
      | undefined,
      string
    >
  ): Promise<
    [
      string[],
      protos.google.pubsub.v1.IListTopicSubscriptionsRequest | null,
      protos.google.pubsub.v1.IListTopicSubscriptionsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      topic: request.topic || '',
    });
    this.initialize();
    return this.innerApiCalls.listTopicSubscriptions(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to {@link listTopicSubscriptions}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listTopicSubscriptions} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.topic
   *   Required. The name of the topic that subscriptions are attached to.
   *   Format is `projects/{project}/topics/{topic}`.
   * @param {number} request.pageSize
   *   Maximum number of subscription names to return.
   * @param {string} request.pageToken
   *   The value returned by the last `ListTopicSubscriptionsResponse`; indicates
   *   that this is a continuation of a prior `ListTopicSubscriptions` call, and
   *   that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing string on 'data' event.
   */
  listTopicSubscriptionsStream(
    request?: protos.google.pubsub.v1.IListTopicSubscriptionsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      topic: request.topic || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listTopicSubscriptions.createStream(
      this.innerApiCalls.listTopicSubscriptions as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to {@link listTopicSubscriptions}, but returns an iterable object.
   *
   * for-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.topic
   *   Required. The name of the topic that subscriptions are attached to.
   *   Format is `projects/{project}/topics/{topic}`.
   * @param {number} request.pageSize
   *   Maximum number of subscription names to return.
   * @param {string} request.pageToken
   *   The value returned by the last `ListTopicSubscriptionsResponse`; indicates
   *   that this is a continuation of a prior `ListTopicSubscriptions` call, and
   *   that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   */
  listTopicSubscriptionsAsync(
    request?: protos.google.pubsub.v1.IListTopicSubscriptionsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<string> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      topic: request.topic || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listTopicSubscriptions.asyncIterate(
      this.innerApiCalls['listTopicSubscriptions'] as GaxCall,
      (request as unknown) as RequestType,
      callSettings
    ) as AsyncIterable<string>;
  }
  listTopicSnapshots(
    request: protos.google.pubsub.v1.IListTopicSnapshotsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      string[],
      protos.google.pubsub.v1.IListTopicSnapshotsRequest | null,
      protos.google.pubsub.v1.IListTopicSnapshotsResponse
    ]
  >;
  listTopicSnapshots(
    request: protos.google.pubsub.v1.IListTopicSnapshotsRequest,
    options: gax.CallOptions,
    callback: PaginationCallback<
      protos.google.pubsub.v1.IListTopicSnapshotsRequest,
      protos.google.pubsub.v1.IListTopicSnapshotsResponse | null | undefined,
      string
    >
  ): void;
  listTopicSnapshots(
    request: protos.google.pubsub.v1.IListTopicSnapshotsRequest,
    callback: PaginationCallback<
      protos.google.pubsub.v1.IListTopicSnapshotsRequest,
      protos.google.pubsub.v1.IListTopicSnapshotsResponse | null | undefined,
      string
    >
  ): void;
  /**
   * Lists the names of the snapshots on this topic. Snapshots are used in
   * <a href="https://cloud.google.com/pubsub/docs/replay-overview">Seek</a>
   * operations, which allow
   * you to manage message acknowledgments in bulk. That is, you can set the
   * acknowledgment state of messages in an existing subscription to the state
   * captured by a snapshot.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.topic
   *   Required. The name of the topic that snapshots are attached to.
   *   Format is `projects/{project}/topics/{topic}`.
   * @param {number} request.pageSize
   *   Maximum number of snapshot names to return.
   * @param {string} request.pageToken
   *   The value returned by the last `ListTopicSnapshotsResponse`; indicates
   *   that this is a continuation of a prior `ListTopicSnapshots` call, and
   *   that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of string.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of string that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListTopicSnapshotsRequest]{@link google.pubsub.v1.ListTopicSnapshotsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListTopicSnapshotsResponse]{@link google.pubsub.v1.ListTopicSnapshotsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listTopicSnapshots(
    request: protos.google.pubsub.v1.IListTopicSnapshotsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | PaginationCallback<
          protos.google.pubsub.v1.IListTopicSnapshotsRequest,
          | protos.google.pubsub.v1.IListTopicSnapshotsResponse
          | null
          | undefined,
          string
        >,
    callback?: PaginationCallback<
      protos.google.pubsub.v1.IListTopicSnapshotsRequest,
      protos.google.pubsub.v1.IListTopicSnapshotsResponse | null | undefined,
      string
    >
  ): Promise<
    [
      string[],
      protos.google.pubsub.v1.IListTopicSnapshotsRequest | null,
      protos.google.pubsub.v1.IListTopicSnapshotsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      topic: request.topic || '',
    });
    this.initialize();
    return this.innerApiCalls.listTopicSnapshots(request, options, callback);
  }

  /**
   * Equivalent to {@link listTopicSnapshots}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listTopicSnapshots} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.topic
   *   Required. The name of the topic that snapshots are attached to.
   *   Format is `projects/{project}/topics/{topic}`.
   * @param {number} request.pageSize
   *   Maximum number of snapshot names to return.
   * @param {string} request.pageToken
   *   The value returned by the last `ListTopicSnapshotsResponse`; indicates
   *   that this is a continuation of a prior `ListTopicSnapshots` call, and
   *   that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing string on 'data' event.
   */
  listTopicSnapshotsStream(
    request?: protos.google.pubsub.v1.IListTopicSnapshotsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      topic: request.topic || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listTopicSnapshots.createStream(
      this.innerApiCalls.listTopicSnapshots as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to {@link listTopicSnapshots}, but returns an iterable object.
   *
   * for-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.topic
   *   Required. The name of the topic that snapshots are attached to.
   *   Format is `projects/{project}/topics/{topic}`.
   * @param {number} request.pageSize
   *   Maximum number of snapshot names to return.
   * @param {string} request.pageToken
   *   The value returned by the last `ListTopicSnapshotsResponse`; indicates
   *   that this is a continuation of a prior `ListTopicSnapshots` call, and
   *   that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   */
  listTopicSnapshotsAsync(
    request?: protos.google.pubsub.v1.IListTopicSnapshotsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<string> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      topic: request.topic || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listTopicSnapshots.asyncIterate(
      this.innerApiCalls['listTopicSnapshots'] as GaxCall,
      (request as unknown) as RequestType,
      callSettings
    ) as AsyncIterable<string>;
  }
  /**
   * Gets the access control policy for a resource. Returns an empty policy
   * if the resource exists and does not have a policy set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {Object} [request.options]
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`. This field is only used by Cloud IAM.
   *
   *   This object should have the same structure as [GetPolicyOptions]{@link google.iam.v1.GetPolicyOptions}
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [Policy]{@link google.iam.v1.Policy}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<IamProtos.google.iam.v1.Policy> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<IamProtos.google.iam.v1.Policy> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<IamProtos.google.iam.v1.TestIamPermissionsResponse> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectTopic resource name string.
   *
   * @param {string} project
   * @param {string} topic
   * @returns {string} Resource name string.
   */
  projectTopicPath(project: string, topic: string) {
    return this.pathTemplates.projectTopicPathTemplate.render({
      project: project,
      topic: topic,
    });
  }

  /**
   * Parse the project from ProjectTopic resource.
   *
   * @param {string} projectTopicName
   *   A fully-qualified path representing project_topic resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectTopicName(projectTopicName: string) {
    return this.pathTemplates.projectTopicPathTemplate.match(projectTopicName)
      .project;
  }

  /**
   * Parse the topic from ProjectTopic resource.
   *
   * @param {string} projectTopicName
   *   A fully-qualified path representing project_topic resource.
   * @returns {string} A string representing the topic.
   */
  matchTopicFromProjectTopicName(projectTopicName: string) {
    return this.pathTemplates.projectTopicPathTemplate.match(projectTopicName)
      .topic;
  }

  /**
   * Return a fully-qualified snapshot resource name string.
   *
   * @param {string} project
   * @param {string} snapshot
   * @returns {string} Resource name string.
   */
  snapshotPath(project: string, snapshot: string) {
    return this.pathTemplates.snapshotPathTemplate.render({
      project: project,
      snapshot: snapshot,
    });
  }

  /**
   * Parse the project from Snapshot resource.
   *
   * @param {string} snapshotName
   *   A fully-qualified path representing Snapshot resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSnapshotName(snapshotName: string) {
    return this.pathTemplates.snapshotPathTemplate.match(snapshotName).project;
  }

  /**
   * Parse the snapshot from Snapshot resource.
   *
   * @param {string} snapshotName
   *   A fully-qualified path representing Snapshot resource.
   * @returns {string} A string representing the snapshot.
   */
  matchSnapshotFromSnapshotName(snapshotName: string) {
    return this.pathTemplates.snapshotPathTemplate.match(snapshotName).snapshot;
  }

  /**
   * Return a fully-qualified subscription resource name string.
   *
   * @param {string} project
   * @param {string} subscription
   * @returns {string} Resource name string.
   */
  subscriptionPath(project: string, subscription: string) {
    return this.pathTemplates.subscriptionPathTemplate.render({
      project: project,
      subscription: subscription,
    });
  }

  /**
   * Parse the project from Subscription resource.
   *
   * @param {string} subscriptionName
   *   A fully-qualified path representing Subscription resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSubscriptionName(subscriptionName: string) {
    return this.pathTemplates.subscriptionPathTemplate.match(subscriptionName)
      .project;
  }

  /**
   * Parse the subscription from Subscription resource.
   *
   * @param {string} subscriptionName
   *   A fully-qualified path representing Subscription resource.
   * @returns {string} A string representing the subscription.
   */
  matchSubscriptionFromSubscriptionName(subscriptionName: string) {
    return this.pathTemplates.subscriptionPathTemplate.match(subscriptionName)
      .subscription;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.publisherStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
