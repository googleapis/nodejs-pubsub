// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
  IamClient,
  IamProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/schema_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './schema_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service for doing schema-related operations.
 * @class
 * @memberof v1
 */
export class SchemaServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  schemaServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of SchemaServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new SchemaServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof SchemaServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectTopicPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/topics/{topic}'
      ),
      schemaPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/schemas/{schema}'
      ),
      snapshotPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/snapshots/{snapshot}'
      ),
      subscriptionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/subscriptions/{subscription}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listSchemas: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'schemas'
      ),
      listSchemaRevisions: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'schemas'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.pubsub.v1.SchemaService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.schemaServiceStub) {
      return this.schemaServiceStub;
    }

    // Put together the "service stub" for
    // google.pubsub.v1.SchemaService.
    this.schemaServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.pubsub.v1.SchemaService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.pubsub.v1.SchemaService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const schemaServiceStubMethods = [
      'createSchema',
      'getSchema',
      'listSchemas',
      'listSchemaRevisions',
      'commitSchema',
      'rollbackSchema',
      'deleteSchemaRevision',
      'deleteSchema',
      'validateSchema',
      'validateMessage',
    ];
    for (const methodName of schemaServiceStubMethods) {
      const callPromise = this.schemaServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.schemaServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'pubsub.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'pubsub.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/pubsub',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Creates a schema.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the project in which to create the schema.
   *   Format is `projects/{project-id}`.
   * @param {google.pubsub.v1.Schema} request.schema
   *   Required. The schema object to create.
   *
   *   This schema's `name` parameter is ignored. The schema object returned
   *   by CreateSchema will have a `name` made using the given `parent` and
   *   `schema_id`.
   * @param {string} request.schemaId
   *   The ID to use for the schema, which will become the final component of
   *   the schema's resource name.
   *
   *   See https://cloud.google.com/pubsub/docs/admin#resource_names for resource
   *   name constraints.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.pubsub.v1.Schema|Schema}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   */
  createSchema(
    request?: protos.google.pubsub.v1.ICreateSchemaRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.ICreateSchemaRequest | undefined,
      {} | undefined,
    ]
  >;
  createSchema(
    request: protos.google.pubsub.v1.ICreateSchemaRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.ICreateSchemaRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createSchema(
    request: protos.google.pubsub.v1.ICreateSchemaRequest,
    callback: Callback<
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.ICreateSchemaRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createSchema(
    request?: protos.google.pubsub.v1.ICreateSchemaRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.pubsub.v1.ISchema,
          protos.google.pubsub.v1.ICreateSchemaRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.ICreateSchemaRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.ICreateSchemaRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createSchema(request, options, callback);
  }
  /**
   * Gets a schema.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the schema to get.
   *   Format is `projects/{project}/schemas/{schema}`.
   * @param {google.pubsub.v1.SchemaView} request.view
   *   The set of fields to return in the response. If not set, returns a Schema
   *   with all fields filled out. Set to `BASIC` to omit the `definition`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.pubsub.v1.Schema|Schema}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   */
  getSchema(
    request?: protos.google.pubsub.v1.IGetSchemaRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.IGetSchemaRequest | undefined,
      {} | undefined,
    ]
  >;
  getSchema(
    request: protos.google.pubsub.v1.IGetSchemaRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.IGetSchemaRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getSchema(
    request: protos.google.pubsub.v1.IGetSchemaRequest,
    callback: Callback<
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.IGetSchemaRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getSchema(
    request?: protos.google.pubsub.v1.IGetSchemaRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.pubsub.v1.ISchema,
          protos.google.pubsub.v1.IGetSchemaRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.IGetSchemaRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.IGetSchemaRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getSchema(request, options, callback);
  }
  /**
   * Commits a new schema revision to an existing schema.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the schema we are revising.
   *   Format is `projects/{project}/schemas/{schema}`.
   * @param {google.pubsub.v1.Schema} request.schema
   *   Required. The schema revision to commit.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.pubsub.v1.Schema|Schema}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   */
  commitSchema(
    request?: protos.google.pubsub.v1.ICommitSchemaRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.ICommitSchemaRequest | undefined,
      {} | undefined,
    ]
  >;
  commitSchema(
    request: protos.google.pubsub.v1.ICommitSchemaRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.ICommitSchemaRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  commitSchema(
    request: protos.google.pubsub.v1.ICommitSchemaRequest,
    callback: Callback<
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.ICommitSchemaRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  commitSchema(
    request?: protos.google.pubsub.v1.ICommitSchemaRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.pubsub.v1.ISchema,
          protos.google.pubsub.v1.ICommitSchemaRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.ICommitSchemaRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.ICommitSchemaRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.commitSchema(request, options, callback);
  }
  /**
   * Creates a new schema revision that is a copy of the provided revision_id.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The schema being rolled back with revision id.
   * @param {string} request.revisionId
   *   Required. The revision ID to roll back to.
   *   It must be a revision of the same schema.
   *
   *     Example: c7cfa2a8
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.pubsub.v1.Schema|Schema}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   */
  rollbackSchema(
    request?: protos.google.pubsub.v1.IRollbackSchemaRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.IRollbackSchemaRequest | undefined,
      {} | undefined,
    ]
  >;
  rollbackSchema(
    request: protos.google.pubsub.v1.IRollbackSchemaRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.IRollbackSchemaRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  rollbackSchema(
    request: protos.google.pubsub.v1.IRollbackSchemaRequest,
    callback: Callback<
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.IRollbackSchemaRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  rollbackSchema(
    request?: protos.google.pubsub.v1.IRollbackSchemaRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.pubsub.v1.ISchema,
          protos.google.pubsub.v1.IRollbackSchemaRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.IRollbackSchemaRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.IRollbackSchemaRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.rollbackSchema(request, options, callback);
  }
  /**
   * Deletes a specific schema revision.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the schema revision to be deleted, with a revision ID
   *   explicitly included.
   *
   *   Example: `projects/123/schemas/my-schema@c7cfa2a8`
   * @param {string} [request.revisionId]
   *   Optional. This field is deprecated and should not be used for specifying
   *   the revision ID. The revision ID should be specified via the `name`
   *   parameter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.pubsub.v1.Schema|Schema}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   */
  deleteSchemaRevision(
    request?: protos.google.pubsub.v1.IDeleteSchemaRevisionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.IDeleteSchemaRevisionRequest | undefined,
      {} | undefined,
    ]
  >;
  deleteSchemaRevision(
    request: protos.google.pubsub.v1.IDeleteSchemaRevisionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.IDeleteSchemaRevisionRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteSchemaRevision(
    request: protos.google.pubsub.v1.IDeleteSchemaRevisionRequest,
    callback: Callback<
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.IDeleteSchemaRevisionRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteSchemaRevision(
    request?: protos.google.pubsub.v1.IDeleteSchemaRevisionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.pubsub.v1.ISchema,
          | protos.google.pubsub.v1.IDeleteSchemaRevisionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.IDeleteSchemaRevisionRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.pubsub.v1.ISchema,
      protos.google.pubsub.v1.IDeleteSchemaRevisionRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteSchemaRevision(request, options, callback);
  }
  /**
   * Deletes a schema.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the schema to delete.
   *   Format is `projects/{project}/schemas/{schema}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   */
  deleteSchema(
    request?: protos.google.pubsub.v1.IDeleteSchemaRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.pubsub.v1.IDeleteSchemaRequest | undefined,
      {} | undefined,
    ]
  >;
  deleteSchema(
    request: protos.google.pubsub.v1.IDeleteSchemaRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.pubsub.v1.IDeleteSchemaRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteSchema(
    request: protos.google.pubsub.v1.IDeleteSchemaRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.pubsub.v1.IDeleteSchemaRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteSchema(
    request?: protos.google.pubsub.v1.IDeleteSchemaRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          protos.google.pubsub.v1.IDeleteSchemaRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.pubsub.v1.IDeleteSchemaRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.pubsub.v1.IDeleteSchemaRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteSchema(request, options, callback);
  }
  /**
   * Validates a schema.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the project in which to validate schemas.
   *   Format is `projects/{project-id}`.
   * @param {google.pubsub.v1.Schema} request.schema
   *   Required. The schema object to validate.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.pubsub.v1.ValidateSchemaResponse|ValidateSchemaResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   */
  validateSchema(
    request?: protos.google.pubsub.v1.IValidateSchemaRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.pubsub.v1.IValidateSchemaResponse,
      protos.google.pubsub.v1.IValidateSchemaRequest | undefined,
      {} | undefined,
    ]
  >;
  validateSchema(
    request: protos.google.pubsub.v1.IValidateSchemaRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.pubsub.v1.IValidateSchemaResponse,
      protos.google.pubsub.v1.IValidateSchemaRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  validateSchema(
    request: protos.google.pubsub.v1.IValidateSchemaRequest,
    callback: Callback<
      protos.google.pubsub.v1.IValidateSchemaResponse,
      protos.google.pubsub.v1.IValidateSchemaRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  validateSchema(
    request?: protos.google.pubsub.v1.IValidateSchemaRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.pubsub.v1.IValidateSchemaResponse,
          protos.google.pubsub.v1.IValidateSchemaRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.pubsub.v1.IValidateSchemaResponse,
      protos.google.pubsub.v1.IValidateSchemaRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.pubsub.v1.IValidateSchemaResponse,
      protos.google.pubsub.v1.IValidateSchemaRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.validateSchema(request, options, callback);
  }
  /**
   * Validates a message against a schema.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the project in which to validate schemas.
   *   Format is `projects/{project-id}`.
   * @param {string} request.name
   *   Name of the schema against which to validate.
   *
   *   Format is `projects/{project}/schemas/{schema}`.
   * @param {google.pubsub.v1.Schema} request.schema
   *   Ad-hoc schema against which to validate
   * @param {Buffer} request.message
   *   Message to validate against the provided `schema_spec`.
   * @param {google.pubsub.v1.Encoding} request.encoding
   *   The encoding expected for messages
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.pubsub.v1.ValidateMessageResponse|ValidateMessageResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   */
  validateMessage(
    request?: protos.google.pubsub.v1.IValidateMessageRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.pubsub.v1.IValidateMessageResponse,
      protos.google.pubsub.v1.IValidateMessageRequest | undefined,
      {} | undefined,
    ]
  >;
  validateMessage(
    request: protos.google.pubsub.v1.IValidateMessageRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.pubsub.v1.IValidateMessageResponse,
      protos.google.pubsub.v1.IValidateMessageRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  validateMessage(
    request: protos.google.pubsub.v1.IValidateMessageRequest,
    callback: Callback<
      protos.google.pubsub.v1.IValidateMessageResponse,
      protos.google.pubsub.v1.IValidateMessageRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  validateMessage(
    request?: protos.google.pubsub.v1.IValidateMessageRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.pubsub.v1.IValidateMessageResponse,
          protos.google.pubsub.v1.IValidateMessageRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.pubsub.v1.IValidateMessageResponse,
      protos.google.pubsub.v1.IValidateMessageRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.pubsub.v1.IValidateMessageResponse,
      protos.google.pubsub.v1.IValidateMessageRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.validateMessage(request, options, callback);
  }

  /**
   * Lists schemas in a project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the project in which to list schemas.
   *   Format is `projects/{project-id}`.
   * @param {google.pubsub.v1.SchemaView} request.view
   *   The set of Schema fields to return in the response. If not set, returns
   *   Schemas with `name` and `type`, but not `definition`. Set to `FULL` to
   *   retrieve all fields.
   * @param {number} request.pageSize
   *   Maximum number of schemas to return.
   * @param {string} request.pageToken
   *   The value returned by the last `ListSchemasResponse`; indicates that
   *   this is a continuation of a prior `ListSchemas` call, and that the
   *   system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.pubsub.v1.Schema|Schema}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listSchemasAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSchemas(
    request?: protos.google.pubsub.v1.IListSchemasRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.pubsub.v1.ISchema[],
      protos.google.pubsub.v1.IListSchemasRequest | null,
      protos.google.pubsub.v1.IListSchemasResponse,
    ]
  >;
  listSchemas(
    request: protos.google.pubsub.v1.IListSchemasRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.pubsub.v1.IListSchemasRequest,
      protos.google.pubsub.v1.IListSchemasResponse | null | undefined,
      protos.google.pubsub.v1.ISchema
    >
  ): void;
  listSchemas(
    request: protos.google.pubsub.v1.IListSchemasRequest,
    callback: PaginationCallback<
      protos.google.pubsub.v1.IListSchemasRequest,
      protos.google.pubsub.v1.IListSchemasResponse | null | undefined,
      protos.google.pubsub.v1.ISchema
    >
  ): void;
  listSchemas(
    request?: protos.google.pubsub.v1.IListSchemasRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.pubsub.v1.IListSchemasRequest,
          protos.google.pubsub.v1.IListSchemasResponse | null | undefined,
          protos.google.pubsub.v1.ISchema
        >,
    callback?: PaginationCallback<
      protos.google.pubsub.v1.IListSchemasRequest,
      protos.google.pubsub.v1.IListSchemasResponse | null | undefined,
      protos.google.pubsub.v1.ISchema
    >
  ): Promise<
    [
      protos.google.pubsub.v1.ISchema[],
      protos.google.pubsub.v1.IListSchemasRequest | null,
      protos.google.pubsub.v1.IListSchemasResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listSchemas(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the project in which to list schemas.
   *   Format is `projects/{project-id}`.
   * @param {google.pubsub.v1.SchemaView} request.view
   *   The set of Schema fields to return in the response. If not set, returns
   *   Schemas with `name` and `type`, but not `definition`. Set to `FULL` to
   *   retrieve all fields.
   * @param {number} request.pageSize
   *   Maximum number of schemas to return.
   * @param {string} request.pageToken
   *   The value returned by the last `ListSchemasResponse`; indicates that
   *   this is a continuation of a prior `ListSchemas` call, and that the
   *   system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.pubsub.v1.Schema|Schema} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listSchemasAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSchemasStream(
    request?: protos.google.pubsub.v1.IListSchemasRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listSchemas'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSchemas.createStream(
      this.innerApiCalls.listSchemas as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listSchemas`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the project in which to list schemas.
   *   Format is `projects/{project-id}`.
   * @param {google.pubsub.v1.SchemaView} request.view
   *   The set of Schema fields to return in the response. If not set, returns
   *   Schemas with `name` and `type`, but not `definition`. Set to `FULL` to
   *   retrieve all fields.
   * @param {number} request.pageSize
   *   Maximum number of schemas to return.
   * @param {string} request.pageToken
   *   The value returned by the last `ListSchemasResponse`; indicates that
   *   this is a continuation of a prior `ListSchemas` call, and that the
   *   system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.pubsub.v1.Schema|Schema}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSchemasAsync(
    request?: protos.google.pubsub.v1.IListSchemasRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.pubsub.v1.ISchema> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listSchemas'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSchemas.asyncIterate(
      this.innerApiCalls['listSchemas'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.pubsub.v1.ISchema>;
  }
  /**
   * Lists all schema revisions for the named schema.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the schema to list revisions for.
   * @param {google.pubsub.v1.SchemaView} request.view
   *   The set of Schema fields to return in the response. If not set, returns
   *   Schemas with `name` and `type`, but not `definition`. Set to `FULL` to
   *   retrieve all fields.
   * @param {number} request.pageSize
   *   The maximum number of revisions to return per page.
   * @param {string} request.pageToken
   *   The page token, received from a previous ListSchemaRevisions call.
   *   Provide this to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.pubsub.v1.Schema|Schema}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listSchemaRevisionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSchemaRevisions(
    request?: protos.google.pubsub.v1.IListSchemaRevisionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.pubsub.v1.ISchema[],
      protos.google.pubsub.v1.IListSchemaRevisionsRequest | null,
      protos.google.pubsub.v1.IListSchemaRevisionsResponse,
    ]
  >;
  listSchemaRevisions(
    request: protos.google.pubsub.v1.IListSchemaRevisionsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.pubsub.v1.IListSchemaRevisionsRequest,
      protos.google.pubsub.v1.IListSchemaRevisionsResponse | null | undefined,
      protos.google.pubsub.v1.ISchema
    >
  ): void;
  listSchemaRevisions(
    request: protos.google.pubsub.v1.IListSchemaRevisionsRequest,
    callback: PaginationCallback<
      protos.google.pubsub.v1.IListSchemaRevisionsRequest,
      protos.google.pubsub.v1.IListSchemaRevisionsResponse | null | undefined,
      protos.google.pubsub.v1.ISchema
    >
  ): void;
  listSchemaRevisions(
    request?: protos.google.pubsub.v1.IListSchemaRevisionsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.pubsub.v1.IListSchemaRevisionsRequest,
          | protos.google.pubsub.v1.IListSchemaRevisionsResponse
          | null
          | undefined,
          protos.google.pubsub.v1.ISchema
        >,
    callback?: PaginationCallback<
      protos.google.pubsub.v1.IListSchemaRevisionsRequest,
      protos.google.pubsub.v1.IListSchemaRevisionsResponse | null | undefined,
      protos.google.pubsub.v1.ISchema
    >
  ): Promise<
    [
      protos.google.pubsub.v1.ISchema[],
      protos.google.pubsub.v1.IListSchemaRevisionsRequest | null,
      protos.google.pubsub.v1.IListSchemaRevisionsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listSchemaRevisions(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the schema to list revisions for.
   * @param {google.pubsub.v1.SchemaView} request.view
   *   The set of Schema fields to return in the response. If not set, returns
   *   Schemas with `name` and `type`, but not `definition`. Set to `FULL` to
   *   retrieve all fields.
   * @param {number} request.pageSize
   *   The maximum number of revisions to return per page.
   * @param {string} request.pageToken
   *   The page token, received from a previous ListSchemaRevisions call.
   *   Provide this to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.pubsub.v1.Schema|Schema} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listSchemaRevisionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSchemaRevisionsStream(
    request?: protos.google.pubsub.v1.IListSchemaRevisionsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    const defaultCallSettings = this._defaults['listSchemaRevisions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSchemaRevisions.createStream(
      this.innerApiCalls.listSchemaRevisions as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listSchemaRevisions`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the schema to list revisions for.
   * @param {google.pubsub.v1.SchemaView} request.view
   *   The set of Schema fields to return in the response. If not set, returns
   *   Schemas with `name` and `type`, but not `definition`. Set to `FULL` to
   *   retrieve all fields.
   * @param {number} request.pageSize
   *   The maximum number of revisions to return per page.
   * @param {string} request.pageToken
   *   The page token, received from a previous ListSchemaRevisions call.
   *   Provide this to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.pubsub.v1.Schema|Schema}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSchemaRevisionsAsync(
    request?: protos.google.pubsub.v1.IListSchemaRevisionsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.pubsub.v1.ISchema> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    const defaultCallSettings = this._defaults['listSchemaRevisions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSchemaRevisions.asyncIterate(
      this.innerApiCalls['listSchemaRevisions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.pubsub.v1.ISchema>;
  }
  /**
   * Gets the access control policy for a resource. Returns an empty policy
   * if the resource exists and does not have a policy set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {Object} [request.options]
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`. This field is only used by Cloud IAM.
   *
   *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.TestIamPermissionsResponse]> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectTopic resource name string.
   *
   * @param {string} project
   * @param {string} topic
   * @returns {string} Resource name string.
   */
  projectTopicPath(project: string, topic: string) {
    return this.pathTemplates.projectTopicPathTemplate.render({
      project: project,
      topic: topic,
    });
  }

  /**
   * Parse the project from ProjectTopic resource.
   *
   * @param {string} projectTopicName
   *   A fully-qualified path representing project_topic resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectTopicName(projectTopicName: string) {
    return this.pathTemplates.projectTopicPathTemplate.match(projectTopicName)
      .project;
  }

  /**
   * Parse the topic from ProjectTopic resource.
   *
   * @param {string} projectTopicName
   *   A fully-qualified path representing project_topic resource.
   * @returns {string} A string representing the topic.
   */
  matchTopicFromProjectTopicName(projectTopicName: string) {
    return this.pathTemplates.projectTopicPathTemplate.match(projectTopicName)
      .topic;
  }

  /**
   * Return a fully-qualified schema resource name string.
   *
   * @param {string} project
   * @param {string} schema
   * @returns {string} Resource name string.
   */
  schemaPath(project: string, schema: string) {
    return this.pathTemplates.schemaPathTemplate.render({
      project: project,
      schema: schema,
    });
  }

  /**
   * Parse the project from Schema resource.
   *
   * @param {string} schemaName
   *   A fully-qualified path representing Schema resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSchemaName(schemaName: string) {
    return this.pathTemplates.schemaPathTemplate.match(schemaName).project;
  }

  /**
   * Parse the schema from Schema resource.
   *
   * @param {string} schemaName
   *   A fully-qualified path representing Schema resource.
   * @returns {string} A string representing the schema.
   */
  matchSchemaFromSchemaName(schemaName: string) {
    return this.pathTemplates.schemaPathTemplate.match(schemaName).schema;
  }

  /**
   * Return a fully-qualified snapshot resource name string.
   *
   * @param {string} project
   * @param {string} snapshot
   * @returns {string} Resource name string.
   */
  snapshotPath(project: string, snapshot: string) {
    return this.pathTemplates.snapshotPathTemplate.render({
      project: project,
      snapshot: snapshot,
    });
  }

  /**
   * Parse the project from Snapshot resource.
   *
   * @param {string} snapshotName
   *   A fully-qualified path representing Snapshot resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSnapshotName(snapshotName: string) {
    return this.pathTemplates.snapshotPathTemplate.match(snapshotName).project;
  }

  /**
   * Parse the snapshot from Snapshot resource.
   *
   * @param {string} snapshotName
   *   A fully-qualified path representing Snapshot resource.
   * @returns {string} A string representing the snapshot.
   */
  matchSnapshotFromSnapshotName(snapshotName: string) {
    return this.pathTemplates.snapshotPathTemplate.match(snapshotName).snapshot;
  }

  /**
   * Return a fully-qualified subscription resource name string.
   *
   * @param {string} project
   * @param {string} subscription
   * @returns {string} Resource name string.
   */
  subscriptionPath(project: string, subscription: string) {
    return this.pathTemplates.subscriptionPathTemplate.render({
      project: project,
      subscription: subscription,
    });
  }

  /**
   * Parse the project from Subscription resource.
   *
   * @param {string} subscriptionName
   *   A fully-qualified path representing Subscription resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSubscriptionName(subscriptionName: string) {
    return this.pathTemplates.subscriptionPathTemplate.match(subscriptionName)
      .project;
  }

  /**
   * Parse the subscription from Subscription resource.
   *
   * @param {string} subscriptionName
   *   A fully-qualified path representing Subscription resource.
   * @returns {string} A string representing the subscription.
   */
  matchSubscriptionFromSubscriptionName(subscriptionName: string) {
    return this.pathTemplates.subscriptionPathTemplate.match(subscriptionName)
      .subscription;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.schemaServiceStub && !this._terminated) {
      return this.schemaServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
      });
    }
    return Promise.resolve();
  }
}
