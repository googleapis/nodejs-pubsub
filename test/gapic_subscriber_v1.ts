// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as subscriberModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, IamProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubBidiStreamingCall<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  return sinon.stub().returns(mockStream);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.SubscriberClient', () => {
  it('has servicePath', () => {
    const servicePath = subscriberModule.v1.SubscriberClient.servicePath;
    assert(servicePath);
  });

  it('has apiEndpoint', () => {
    const apiEndpoint = subscriberModule.v1.SubscriberClient.apiEndpoint;
    assert(apiEndpoint);
  });

  it('has port', () => {
    const port = subscriberModule.v1.SubscriberClient.port;
    assert(port);
    assert(typeof port === 'number');
  });

  it('should create a client with no option', () => {
    const client = new subscriberModule.v1.SubscriberClient();
    assert(client);
  });

  it('should create a client with gRPC fallback', () => {
    const client = new subscriberModule.v1.SubscriberClient({
      fallback: true,
    });
    assert(client);
  });

  it('has initialize method and supports deferred initialization', async () => {
    const client = new subscriberModule.v1.SubscriberClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    assert.strictEqual(client.subscriberStub, undefined);
    await client.initialize();
    assert(client.subscriberStub);
  });

  it('has close method for the initialized client', done => {
    const client = new subscriberModule.v1.SubscriberClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.initialize();
    assert(client.subscriberStub);
    client.close().then(() => {
      done();
    });
  });

  it('has close method for the non-initialized client', done => {
    const client = new subscriberModule.v1.SubscriberClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    assert.strictEqual(client.subscriberStub, undefined);
    client.close().then(() => {
      done();
    });
  });

  it('has getProjectId method', async () => {
    const fakeProjectId = 'fake-project-id';
    const client = new subscriberModule.v1.SubscriberClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
    const result = await client.getProjectId();
    assert.strictEqual(result, fakeProjectId);
    assert((client.auth.getProjectId as SinonStub).calledWithExactly());
  });

  it('has getProjectId method with callback', async () => {
    const fakeProjectId = 'fake-project-id';
    const client = new subscriberModule.v1.SubscriberClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.auth.getProjectId = sinon
      .stub()
      .callsArgWith(0, null, fakeProjectId);
    const promise = new Promise((resolve, reject) => {
      client.getProjectId((err?: Error | null, projectId?: string | null) => {
        if (err) {
          reject(err);
        } else {
          resolve(projectId);
        }
      });
    });
    const result = await promise;
    assert.strictEqual(result, fakeProjectId);
  });

  describe('createSubscription', () => {
    it('invokes createSubscription without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.Subscription()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.pubsub.v1.Subscription()
      );
      client.innerApiCalls.createSubscription =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createSubscription(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createSubscription as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createSubscription without error using callback', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.Subscription()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.pubsub.v1.Subscription()
      );
      client.innerApiCalls.createSubscription =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createSubscription(
          request,
          (
            err?: Error | null,
            result?: protos.google.pubsub.v1.ISubscription | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createSubscription as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes createSubscription with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.Subscription()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.createSubscription = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createSubscription(request), expectedError);
      assert(
        (client.innerApiCalls.createSubscription as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createSubscription with closed client', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.Subscription()
      );
      request.name = '';
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createSubscription(request), expectedError);
    });
  });

  describe('getSubscription', () => {
    it('invokes getSubscription without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.GetSubscriptionRequest()
      );
      request.subscription = '';
      const expectedHeaderRequestParams = 'subscription=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.pubsub.v1.Subscription()
      );
      client.innerApiCalls.getSubscription = stubSimpleCall(expectedResponse);
      const [response] = await client.getSubscription(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getSubscription as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getSubscription without error using callback', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.GetSubscriptionRequest()
      );
      request.subscription = '';
      const expectedHeaderRequestParams = 'subscription=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.pubsub.v1.Subscription()
      );
      client.innerApiCalls.getSubscription =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getSubscription(
          request,
          (
            err?: Error | null,
            result?: protos.google.pubsub.v1.ISubscription | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getSubscription as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes getSubscription with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.GetSubscriptionRequest()
      );
      request.subscription = '';
      const expectedHeaderRequestParams = 'subscription=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.getSubscription = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getSubscription(request), expectedError);
      assert(
        (client.innerApiCalls.getSubscription as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getSubscription with closed client', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.GetSubscriptionRequest()
      );
      request.subscription = '';
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getSubscription(request), expectedError);
    });
  });

  describe('updateSubscription', () => {
    it('invokes updateSubscription without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.UpdateSubscriptionRequest()
      );
      request.subscription = {};
      request.subscription.name = '';
      const expectedHeaderRequestParams = 'subscription.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.pubsub.v1.Subscription()
      );
      client.innerApiCalls.updateSubscription =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateSubscription(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateSubscription as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes updateSubscription without error using callback', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.UpdateSubscriptionRequest()
      );
      request.subscription = {};
      request.subscription.name = '';
      const expectedHeaderRequestParams = 'subscription.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.pubsub.v1.Subscription()
      );
      client.innerApiCalls.updateSubscription =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateSubscription(
          request,
          (
            err?: Error | null,
            result?: protos.google.pubsub.v1.ISubscription | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateSubscription as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes updateSubscription with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.UpdateSubscriptionRequest()
      );
      request.subscription = {};
      request.subscription.name = '';
      const expectedHeaderRequestParams = 'subscription.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.updateSubscription = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateSubscription(request), expectedError);
      assert(
        (client.innerApiCalls.updateSubscription as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes updateSubscription with closed client', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.UpdateSubscriptionRequest()
      );
      request.subscription = {};
      request.subscription.name = '';
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateSubscription(request), expectedError);
    });
  });

  describe('deleteSubscription', () => {
    it('invokes deleteSubscription without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.DeleteSubscriptionRequest()
      );
      request.subscription = '';
      const expectedHeaderRequestParams = 'subscription=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteSubscription =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteSubscription(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteSubscription as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deleteSubscription without error using callback', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.DeleteSubscriptionRequest()
      );
      request.subscription = '';
      const expectedHeaderRequestParams = 'subscription=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteSubscription =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteSubscription(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteSubscription as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes deleteSubscription with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.DeleteSubscriptionRequest()
      );
      request.subscription = '';
      const expectedHeaderRequestParams = 'subscription=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteSubscription = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteSubscription(request), expectedError);
      assert(
        (client.innerApiCalls.deleteSubscription as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deleteSubscription with closed client', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.DeleteSubscriptionRequest()
      );
      request.subscription = '';
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteSubscription(request), expectedError);
    });
  });

  describe('modifyAckDeadline', () => {
    it('invokes modifyAckDeadline without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.ModifyAckDeadlineRequest()
      );
      request.subscription = '';
      const expectedHeaderRequestParams = 'subscription=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.modifyAckDeadline = stubSimpleCall(expectedResponse);
      const [response] = await client.modifyAckDeadline(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.modifyAckDeadline as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes modifyAckDeadline without error using callback', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.ModifyAckDeadlineRequest()
      );
      request.subscription = '';
      const expectedHeaderRequestParams = 'subscription=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.modifyAckDeadline =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.modifyAckDeadline(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.modifyAckDeadline as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes modifyAckDeadline with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.ModifyAckDeadlineRequest()
      );
      request.subscription = '';
      const expectedHeaderRequestParams = 'subscription=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.modifyAckDeadline = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.modifyAckDeadline(request), expectedError);
      assert(
        (client.innerApiCalls.modifyAckDeadline as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes modifyAckDeadline with closed client', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.ModifyAckDeadlineRequest()
      );
      request.subscription = '';
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.modifyAckDeadline(request), expectedError);
    });
  });

  describe('acknowledge', () => {
    it('invokes acknowledge without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.AcknowledgeRequest()
      );
      request.subscription = '';
      const expectedHeaderRequestParams = 'subscription=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.acknowledge = stubSimpleCall(expectedResponse);
      const [response] = await client.acknowledge(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.acknowledge as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes acknowledge without error using callback', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.AcknowledgeRequest()
      );
      request.subscription = '';
      const expectedHeaderRequestParams = 'subscription=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.acknowledge =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.acknowledge(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.acknowledge as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes acknowledge with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.AcknowledgeRequest()
      );
      request.subscription = '';
      const expectedHeaderRequestParams = 'subscription=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.acknowledge = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.acknowledge(request), expectedError);
      assert(
        (client.innerApiCalls.acknowledge as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes acknowledge with closed client', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.AcknowledgeRequest()
      );
      request.subscription = '';
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.acknowledge(request), expectedError);
    });
  });

  describe('pull', () => {
    it('invokes pull without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.PullRequest()
      );
      request.subscription = '';
      const expectedHeaderRequestParams = 'subscription=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.pubsub.v1.PullResponse()
      );
      client.innerApiCalls.pull = stubSimpleCall(expectedResponse);
      const [response] = await client.pull(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.pull as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes pull without error using callback', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.PullRequest()
      );
      request.subscription = '';
      const expectedHeaderRequestParams = 'subscription=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.pubsub.v1.PullResponse()
      );
      client.innerApiCalls.pull = stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.pull(
          request,
          (
            err?: Error | null,
            result?: protos.google.pubsub.v1.IPullResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.pull as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes pull with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.PullRequest()
      );
      request.subscription = '';
      const expectedHeaderRequestParams = 'subscription=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.pull = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.pull(request), expectedError);
      assert(
        (client.innerApiCalls.pull as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes pull with closed client', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.PullRequest()
      );
      request.subscription = '';
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.pull(request), expectedError);
    });
  });

  describe('modifyPushConfig', () => {
    it('invokes modifyPushConfig without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.ModifyPushConfigRequest()
      );
      request.subscription = '';
      const expectedHeaderRequestParams = 'subscription=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.modifyPushConfig = stubSimpleCall(expectedResponse);
      const [response] = await client.modifyPushConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.modifyPushConfig as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes modifyPushConfig without error using callback', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.ModifyPushConfigRequest()
      );
      request.subscription = '';
      const expectedHeaderRequestParams = 'subscription=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.modifyPushConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.modifyPushConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.modifyPushConfig as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes modifyPushConfig with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.ModifyPushConfigRequest()
      );
      request.subscription = '';
      const expectedHeaderRequestParams = 'subscription=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.modifyPushConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.modifyPushConfig(request), expectedError);
      assert(
        (client.innerApiCalls.modifyPushConfig as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes modifyPushConfig with closed client', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.ModifyPushConfigRequest()
      );
      request.subscription = '';
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.modifyPushConfig(request), expectedError);
    });
  });

  describe('getSnapshot', () => {
    it('invokes getSnapshot without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.GetSnapshotRequest()
      );
      request.snapshot = '';
      const expectedHeaderRequestParams = 'snapshot=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.pubsub.v1.Snapshot()
      );
      client.innerApiCalls.getSnapshot = stubSimpleCall(expectedResponse);
      const [response] = await client.getSnapshot(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getSnapshot as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getSnapshot without error using callback', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.GetSnapshotRequest()
      );
      request.snapshot = '';
      const expectedHeaderRequestParams = 'snapshot=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.pubsub.v1.Snapshot()
      );
      client.innerApiCalls.getSnapshot =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getSnapshot(
          request,
          (
            err?: Error | null,
            result?: protos.google.pubsub.v1.ISnapshot | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getSnapshot as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes getSnapshot with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.GetSnapshotRequest()
      );
      request.snapshot = '';
      const expectedHeaderRequestParams = 'snapshot=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.getSnapshot = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getSnapshot(request), expectedError);
      assert(
        (client.innerApiCalls.getSnapshot as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getSnapshot with closed client', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.GetSnapshotRequest()
      );
      request.snapshot = '';
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getSnapshot(request), expectedError);
    });
  });

  describe('createSnapshot', () => {
    it('invokes createSnapshot without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.CreateSnapshotRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.pubsub.v1.Snapshot()
      );
      client.innerApiCalls.createSnapshot = stubSimpleCall(expectedResponse);
      const [response] = await client.createSnapshot(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createSnapshot as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createSnapshot without error using callback', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.CreateSnapshotRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.pubsub.v1.Snapshot()
      );
      client.innerApiCalls.createSnapshot =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createSnapshot(
          request,
          (
            err?: Error | null,
            result?: protos.google.pubsub.v1.ISnapshot | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createSnapshot as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes createSnapshot with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.CreateSnapshotRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.createSnapshot = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createSnapshot(request), expectedError);
      assert(
        (client.innerApiCalls.createSnapshot as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createSnapshot with closed client', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.CreateSnapshotRequest()
      );
      request.name = '';
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createSnapshot(request), expectedError);
    });
  });

  describe('updateSnapshot', () => {
    it('invokes updateSnapshot without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.UpdateSnapshotRequest()
      );
      request.snapshot = {};
      request.snapshot.name = '';
      const expectedHeaderRequestParams = 'snapshot.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.pubsub.v1.Snapshot()
      );
      client.innerApiCalls.updateSnapshot = stubSimpleCall(expectedResponse);
      const [response] = await client.updateSnapshot(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateSnapshot as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes updateSnapshot without error using callback', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.UpdateSnapshotRequest()
      );
      request.snapshot = {};
      request.snapshot.name = '';
      const expectedHeaderRequestParams = 'snapshot.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.pubsub.v1.Snapshot()
      );
      client.innerApiCalls.updateSnapshot =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateSnapshot(
          request,
          (
            err?: Error | null,
            result?: protos.google.pubsub.v1.ISnapshot | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateSnapshot as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes updateSnapshot with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.UpdateSnapshotRequest()
      );
      request.snapshot = {};
      request.snapshot.name = '';
      const expectedHeaderRequestParams = 'snapshot.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.updateSnapshot = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateSnapshot(request), expectedError);
      assert(
        (client.innerApiCalls.updateSnapshot as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes updateSnapshot with closed client', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.UpdateSnapshotRequest()
      );
      request.snapshot = {};
      request.snapshot.name = '';
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateSnapshot(request), expectedError);
    });
  });

  describe('deleteSnapshot', () => {
    it('invokes deleteSnapshot without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.DeleteSnapshotRequest()
      );
      request.snapshot = '';
      const expectedHeaderRequestParams = 'snapshot=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteSnapshot = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteSnapshot(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteSnapshot as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deleteSnapshot without error using callback', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.DeleteSnapshotRequest()
      );
      request.snapshot = '';
      const expectedHeaderRequestParams = 'snapshot=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteSnapshot =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteSnapshot(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteSnapshot as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes deleteSnapshot with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.DeleteSnapshotRequest()
      );
      request.snapshot = '';
      const expectedHeaderRequestParams = 'snapshot=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteSnapshot = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteSnapshot(request), expectedError);
      assert(
        (client.innerApiCalls.deleteSnapshot as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deleteSnapshot with closed client', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.DeleteSnapshotRequest()
      );
      request.snapshot = '';
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteSnapshot(request), expectedError);
    });
  });

  describe('seek', () => {
    it('invokes seek without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.SeekRequest()
      );
      request.subscription = '';
      const expectedHeaderRequestParams = 'subscription=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.pubsub.v1.SeekResponse()
      );
      client.innerApiCalls.seek = stubSimpleCall(expectedResponse);
      const [response] = await client.seek(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.seek as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes seek without error using callback', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.SeekRequest()
      );
      request.subscription = '';
      const expectedHeaderRequestParams = 'subscription=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.pubsub.v1.SeekResponse()
      );
      client.innerApiCalls.seek = stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.seek(
          request,
          (
            err?: Error | null,
            result?: protos.google.pubsub.v1.ISeekResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.seek as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes seek with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.SeekRequest()
      );
      request.subscription = '';
      const expectedHeaderRequestParams = 'subscription=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.seek = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.seek(request), expectedError);
      assert(
        (client.innerApiCalls.seek as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes seek with closed client', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.SeekRequest()
      );
      request.subscription = '';
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.seek(request), expectedError);
    });
  });

  describe('streamingPull', () => {
    it('invokes streamingPull without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.StreamingPullRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.pubsub.v1.StreamingPullResponse()
      );
      client.innerApiCalls.streamingPull =
        stubBidiStreamingCall(expectedResponse);
      const stream = client.streamingPull();
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (response: protos.google.pubsub.v1.StreamingPullResponse) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
        stream.write(request);
        stream.end();
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.streamingPull as SinonStub)
          .getCall(0)
          .calledWith(null)
      );
      assert.deepStrictEqual(
        ((stream as unknown as PassThrough)._transform as SinonStub).getCall(0)
          .args[0],
        request
      );
    });

    it('invokes streamingPull with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.StreamingPullRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.streamingPull = stubBidiStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.streamingPull();
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (response: protos.google.pubsub.v1.StreamingPullResponse) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
        stream.write(request);
        stream.end();
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.innerApiCalls.streamingPull as SinonStub)
          .getCall(0)
          .calledWith(null)
      );
      assert.deepStrictEqual(
        ((stream as unknown as PassThrough)._transform as SinonStub).getCall(0)
          .args[0],
        request
      );
    });
  });

  describe('listSubscriptions', () => {
    it('invokes listSubscriptions without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.ListSubscriptionsRequest()
      );
      request.project = '';
      const expectedHeaderRequestParams = 'project=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(new protos.google.pubsub.v1.Subscription()),
        generateSampleMessage(new protos.google.pubsub.v1.Subscription()),
        generateSampleMessage(new protos.google.pubsub.v1.Subscription()),
      ];
      client.innerApiCalls.listSubscriptions = stubSimpleCall(expectedResponse);
      const [response] = await client.listSubscriptions(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listSubscriptions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listSubscriptions without error using callback', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.ListSubscriptionsRequest()
      );
      request.project = '';
      const expectedHeaderRequestParams = 'project=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(new protos.google.pubsub.v1.Subscription()),
        generateSampleMessage(new protos.google.pubsub.v1.Subscription()),
        generateSampleMessage(new protos.google.pubsub.v1.Subscription()),
      ];
      client.innerApiCalls.listSubscriptions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listSubscriptions(
          request,
          (
            err?: Error | null,
            result?: protos.google.pubsub.v1.ISubscription[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listSubscriptions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes listSubscriptions with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.ListSubscriptionsRequest()
      );
      request.project = '';
      const expectedHeaderRequestParams = 'project=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.listSubscriptions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listSubscriptions(request), expectedError);
      assert(
        (client.innerApiCalls.listSubscriptions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listSubscriptionsStream without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.ListSubscriptionsRequest()
      );
      request.project = '';
      const expectedHeaderRequestParams = 'project=';
      const expectedResponse = [
        generateSampleMessage(new protos.google.pubsub.v1.Subscription()),
        generateSampleMessage(new protos.google.pubsub.v1.Subscription()),
        generateSampleMessage(new protos.google.pubsub.v1.Subscription()),
      ];
      client.descriptors.page.listSubscriptions.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listSubscriptionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.pubsub.v1.Subscription[] = [];
        stream.on('data', (response: protos.google.pubsub.v1.Subscription) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listSubscriptions.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listSubscriptions, request)
      );
      assert.strictEqual(
        (
          client.descriptors.page.listSubscriptions.createStream as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('invokes listSubscriptionsStream with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.ListSubscriptionsRequest()
      );
      request.project = '';
      const expectedHeaderRequestParams = 'project=';
      const expectedError = new Error('expected');
      client.descriptors.page.listSubscriptions.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listSubscriptionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.pubsub.v1.Subscription[] = [];
        stream.on('data', (response: protos.google.pubsub.v1.Subscription) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listSubscriptions.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listSubscriptions, request)
      );
      assert.strictEqual(
        (
          client.descriptors.page.listSubscriptions.createStream as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listSubscriptions without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.ListSubscriptionsRequest()
      );
      request.project = '';
      const expectedHeaderRequestParams = 'project=';
      const expectedResponse = [
        generateSampleMessage(new protos.google.pubsub.v1.Subscription()),
        generateSampleMessage(new protos.google.pubsub.v1.Subscription()),
        generateSampleMessage(new protos.google.pubsub.v1.Subscription()),
      ];
      client.descriptors.page.listSubscriptions.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.pubsub.v1.ISubscription[] = [];
      const iterable = client.listSubscriptionsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listSubscriptions.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (
          client.descriptors.page.listSubscriptions.asyncIterate as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listSubscriptions with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.ListSubscriptionsRequest()
      );
      request.project = '';
      const expectedHeaderRequestParams = 'project=';
      const expectedError = new Error('expected');
      client.descriptors.page.listSubscriptions.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listSubscriptionsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.pubsub.v1.ISubscription[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listSubscriptions.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (
          client.descriptors.page.listSubscriptions.asyncIterate as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });
  });

  describe('listSnapshots', () => {
    it('invokes listSnapshots without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.ListSnapshotsRequest()
      );
      request.project = '';
      const expectedHeaderRequestParams = 'project=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(new protos.google.pubsub.v1.Snapshot()),
        generateSampleMessage(new protos.google.pubsub.v1.Snapshot()),
        generateSampleMessage(new protos.google.pubsub.v1.Snapshot()),
      ];
      client.innerApiCalls.listSnapshots = stubSimpleCall(expectedResponse);
      const [response] = await client.listSnapshots(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listSnapshots as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listSnapshots without error using callback', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.ListSnapshotsRequest()
      );
      request.project = '';
      const expectedHeaderRequestParams = 'project=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(new protos.google.pubsub.v1.Snapshot()),
        generateSampleMessage(new protos.google.pubsub.v1.Snapshot()),
        generateSampleMessage(new protos.google.pubsub.v1.Snapshot()),
      ];
      client.innerApiCalls.listSnapshots =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listSnapshots(
          request,
          (
            err?: Error | null,
            result?: protos.google.pubsub.v1.ISnapshot[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listSnapshots as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes listSnapshots with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.ListSnapshotsRequest()
      );
      request.project = '';
      const expectedHeaderRequestParams = 'project=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.listSnapshots = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listSnapshots(request), expectedError);
      assert(
        (client.innerApiCalls.listSnapshots as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listSnapshotsStream without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.ListSnapshotsRequest()
      );
      request.project = '';
      const expectedHeaderRequestParams = 'project=';
      const expectedResponse = [
        generateSampleMessage(new protos.google.pubsub.v1.Snapshot()),
        generateSampleMessage(new protos.google.pubsub.v1.Snapshot()),
        generateSampleMessage(new protos.google.pubsub.v1.Snapshot()),
      ];
      client.descriptors.page.listSnapshots.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listSnapshotsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.pubsub.v1.Snapshot[] = [];
        stream.on('data', (response: protos.google.pubsub.v1.Snapshot) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listSnapshots.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listSnapshots, request)
      );
      assert.strictEqual(
        (
          client.descriptors.page.listSnapshots.createStream as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('invokes listSnapshotsStream with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.ListSnapshotsRequest()
      );
      request.project = '';
      const expectedHeaderRequestParams = 'project=';
      const expectedError = new Error('expected');
      client.descriptors.page.listSnapshots.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listSnapshotsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.pubsub.v1.Snapshot[] = [];
        stream.on('data', (response: protos.google.pubsub.v1.Snapshot) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listSnapshots.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listSnapshots, request)
      );
      assert.strictEqual(
        (
          client.descriptors.page.listSnapshots.createStream as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listSnapshots without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.ListSnapshotsRequest()
      );
      request.project = '';
      const expectedHeaderRequestParams = 'project=';
      const expectedResponse = [
        generateSampleMessage(new protos.google.pubsub.v1.Snapshot()),
        generateSampleMessage(new protos.google.pubsub.v1.Snapshot()),
        generateSampleMessage(new protos.google.pubsub.v1.Snapshot()),
      ];
      client.descriptors.page.listSnapshots.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.pubsub.v1.ISnapshot[] = [];
      const iterable = client.listSnapshotsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listSnapshots.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (
          client.descriptors.page.listSnapshots.asyncIterate as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listSnapshots with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.pubsub.v1.ListSnapshotsRequest()
      );
      request.project = '';
      const expectedHeaderRequestParams = 'project=';
      const expectedError = new Error('expected');
      client.descriptors.page.listSnapshots.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listSnapshotsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.pubsub.v1.ISnapshot[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listSnapshots.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (
          client.descriptors.page.listSnapshots.asyncIterate as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });
  });
  describe('getIamPolicy', () => {
    it('invokes getIamPolicy without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.getIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getIamPolicy without error using callback', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.getIamPolicy as SinonStub).getCall(0));
    });
    it('invokes getIamPolicy with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.getIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('setIamPolicy', () => {
    it('invokes setIamPolicy without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.setIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes setIamPolicy without error using callback', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.setIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.setIamPolicy as SinonStub).getCall(0));
    });
    it('invokes setIamPolicy with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.setIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('testIamPermissions', () => {
    it('invokes testIamPermissions without error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
      const response = await client.testIamPermissions(
        request,
        expectedOptions
      );
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes testIamPermissions without error using callback', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.testIamPermissions(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.TestIamPermissionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.testIamPermissions as SinonStub).getCall(0));
    });
    it('invokes testIamPermissions with error', async () => {
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.testIamPermissions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.testIamPermissions(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('Path templates', () => {
    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectTopic', () => {
      const fakePath = '/rendered/path/projectTopic';
      const expectedParameters = {
        project: 'projectValue',
        topic: 'topicValue',
      };
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectTopicPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectTopicPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectTopicPath', () => {
        const result = client.projectTopicPath('projectValue', 'topicValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectTopicPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectTopicName', () => {
        const result = client.matchProjectFromProjectTopicName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectTopicPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTopicFromProjectTopicName', () => {
        const result = client.matchTopicFromProjectTopicName(fakePath);
        assert.strictEqual(result, 'topicValue');
        assert(
          (client.pathTemplates.projectTopicPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('schema', () => {
      const fakePath = '/rendered/path/schema';
      const expectedParameters = {
        project: 'projectValue',
        schema: 'schemaValue',
      };
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.schemaPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.schemaPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('schemaPath', () => {
        const result = client.schemaPath('projectValue', 'schemaValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.schemaPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromSchemaName', () => {
        const result = client.matchProjectFromSchemaName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.schemaPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSchemaFromSchemaName', () => {
        const result = client.matchSchemaFromSchemaName(fakePath);
        assert.strictEqual(result, 'schemaValue');
        assert(
          (client.pathTemplates.schemaPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('snapshot', () => {
      const fakePath = '/rendered/path/snapshot';
      const expectedParameters = {
        project: 'projectValue',
        snapshot: 'snapshotValue',
      };
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.snapshotPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.snapshotPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('snapshotPath', () => {
        const result = client.snapshotPath('projectValue', 'snapshotValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.snapshotPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromSnapshotName', () => {
        const result = client.matchProjectFromSnapshotName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.snapshotPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSnapshotFromSnapshotName', () => {
        const result = client.matchSnapshotFromSnapshotName(fakePath);
        assert.strictEqual(result, 'snapshotValue');
        assert(
          (client.pathTemplates.snapshotPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('subscription', () => {
      const fakePath = '/rendered/path/subscription';
      const expectedParameters = {
        project: 'projectValue',
        subscription: 'subscriptionValue',
      };
      const client = new subscriberModule.v1.SubscriberClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.subscriptionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.subscriptionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('subscriptionPath', () => {
        const result = client.subscriptionPath(
          'projectValue',
          'subscriptionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.subscriptionPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromSubscriptionName', () => {
        const result = client.matchProjectFromSubscriptionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.subscriptionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSubscriptionFromSubscriptionName', () => {
        const result = client.matchSubscriptionFromSubscriptionName(fakePath);
        assert.strictEqual(result, 'subscriptionValue');
        assert(
          (client.pathTemplates.subscriptionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
